`include "defines.v"

//IFID模块暂时保存指令，以及指令地址，在下一个周期传递到译码阶段，代码比较简单，只是简单的传递

module if_id(

	input	wire		clk,                   //1bit，复位信号
	input   wire		rst,                   //1bit，时钟信号
	
        //来自取指阶段的信号
	input  wire[`InstAddrBus]      if_pc,          //32bit，取指阶段取得的指令对应的地址
	input  wire[`InstBus]          if_inst,        //32bit，取指阶段取得的指令
	
	//对应译码阶段的信号
	output reg[`InstAddrBus]       id_pc,          //32bit，译码阶段的指令对应的地址
	output reg[`InstBus]           id_inst         //32bit，译码阶段的指令
	
);

	always @ (posedge clk) begin
		if (rst == `RstEnable) begin
			id_pc <= `ZeroWord;            //复位的时候pc为0
			id_inst <= `ZeroWord;          //复位的时候指令也为0，其实就是空指令
	        end else begin
		        id_pc <= if_pc;                //其余时刻向下传递取指的值
		        id_inst <= if_inst;
		end
	end

endmodule

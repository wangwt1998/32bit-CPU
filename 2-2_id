`include "defines.v"

//对指令进行译码，得到运算类型和子类型，源操作数1和2，是否要写入寄存器和目的寄存器地址
module id(

	input wire		      rst,                //1bit，复位信号
	input wire[`InstAddrBus]      pc_i,               //32bit，取指送过来的指令的地址
	input wire[`InstBus]          inst_i,             //32bit，取指送过来的指令
        
	//输出到regfile的信息
	output reg                    reg1_read_o,        //1bit，读寄存器1的使能信号
	output reg                    reg2_read_o,        //1bit，读寄存器2的使能信号     
	output reg[`RegAddrBus]       reg1_addr_o,        //1bit，读寄存器1的地址信号
	output reg[`RegAddrBus]       reg2_addr_o,        //1bit，读寄存器2的地址信号    
	
	//读取的regflie的值
	input wire[`RegBus]           reg1_data_i,        //1bit，从寄存器1读出来的值
	input wire[`RegBus]           reg2_data_i,        //1bit，从寄存器2读出来的值	      
	
	//送到执行阶段的信息
	output reg[`AluOpBus]         aluop_o,            //8bit，译码阶段得到的运算子类型
	output reg[`AluSelBus]        alusel_o,           //3bit，译码阶段得到的运算类型
	output reg[`RegBus]           reg1_o,             //32bit，源操作数1
	output reg[`RegBus]           reg2_o,             //32bit，源操作数2
	output reg                    wreg_o              //1bit，是否有要写入的目的寄存器
	output reg[`RegAddrBus]       wd_o,               //5bit，要写入的目的寄存器地址
	
	//为了进行数据前推，处于执行阶段的指令要写入的目的寄存器信息
	input wire		      ex_wreg_i,
	input wire[`RegBus]	      ex_wdata_i,
	input wire[`RegAddrBus]       ex_wd_i,
	
	//为了进行数据前推，处于访存阶段的指令要写入的目的寄存器信息
	input wire		      mem_wreg_i,
	input wire[`RegBus]           mem_wdata_i,
	input wire[`RegAddrBus]       mem_wd_i,
);

  //取得指令的指令码，功能码，
  //对于ori指令只需通过判断第26-31bit的值，即可判断是否是ori指令
  wire[5:0] op = inst_i[31:26];
  wire[4:0] op2 = inst_i[10:6];
  wire[5:0] op3 = inst_i[5:0];
  wire[4:0] op4 = inst_i[20:16];
  
  //保存指令执行需要的立即数
  reg[`RegBus]	imm;
  
  //指示指令是否有效
  reg instvalid;
 
 
 //////第一段：对指令进行译码//////
	always @ (*) begin	//组合逻辑电路
		if (rst == `RstEnable) begin   //复位
			aluop_o       <= `EXE_NOP_OP;            //运算子类型，复位时置0
			alusel_o      <= `EXE_RES_NOP;           //运算类型，复位时置0
			wreg_o        <= `WriteDisable;          //写入目的寄存器使能信号无效
			wd_o          <= `NOPRegAddr;            //写入目的寄存器地址置0
			instvalid     <= `InstValid;             //指令无效
			reg1_read_o   <= 1'b0;                   //读寄存器1使能信号无效
			reg2_read_o   <= 1'b0;                   //读寄存器2使能信号无效
			reg1_addr_o   <= `NOPRegAddr;            //读寄存器1地址信号置0        
			reg2_addr_o   <= `NOPRegAddr;            //读寄存器2地址信号置0      
			imm           <= 32'h0;                  //立即数置0
	        end else begin
			aluop_o       <= `EXE_NOP_OP;            //运算子类型，初始值设为0
			alusel_o      <= `EXE_RES_NOP;           //运算类型，初始值设为0
			wreg_o        <= `WriteDisable;          //写入目的寄存器使能信号，初始值设为无效
			wd_o          <= inst_i[15:11];          //写入目的寄存器地址，从指令中提出来
			instvalid     <= `InstInvalid;           //指令初始值设为无效	   
			reg1_read_o   <= 1'b0;                   //读寄存器1使能信号，初始值设为无效
			reg2_read_o   <= 1'b0;                   //读寄存器2使能信号，初始值设为无效
			reg1_addr_o   <= inst_i[25:21];          //读寄存器1地址信号，从指令中提出来
			reg2_addr_o   <= inst_i[20:16];          //读寄存器2地址信号，从指令中提出来
			imm <= `ZeroWord;		         //立即数，初始值置0
		  
		  //把上面赋初值的8个变量依据指令的不同赋上相应的值
		  
		  case (op)
		    `EXE_SPECIAL_INST:begin
		    	     case (op2)
		    		5'b00000:begin
		    			     case (op3)
		    				     `EXE_OR:begin
		    					        wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_OR_OP;
		  						alusel_o <= `EXE_RES_LOGIC; 	
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end  
		    				     `EXE_AND:begin
		    					        wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_AND_OP;
		  						alusel_o <= `EXE_RES_LOGIC;	  
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;	
		  						instvalid <= `InstValid;	
								end  	
		    				     `EXE_XOR:begin
		    					        wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_XOR_OP;
		  						alusel_o <= `EXE_RES_LOGIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;	
		  						instvalid <= `InstValid;	
								end  				
		    				     `EXE_NOR:begin
		    					        wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_NOR_OP;
		  						alusel_o <= `EXE_RES_LOGIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;	
		  						instvalid <= `InstValid;	
								end 
						     `EXE_SLLV: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SLL_OP;
		  						alusel_o <= `EXE_RES_SHIFT;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end 
						     `EXE_SRLV: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SRL_OP;
		  						alusel_o <= `EXE_RES_SHIFT;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end 					
						     `EXE_SRAV: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SRA_OP;
		  						alusel_o <= `EXE_RES_SHIFT;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;			
		  						end			
						     `EXE_SYNC: begin
								wreg_o <= `WriteDisable;		
								aluop_o <= `EXE_NOP_OP;
		  						alusel_o <= `EXE_RES_NOP;		
								reg1_read_o <= 1'b0;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end								  									
					              `EXE_MFHI: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_MFHI_OP;
		  						alusel_o <= `EXE_RES_MOVE;   
								reg1_read_o <= 1'b0;	reg2_read_o <= 1'b0;
		  						instvalid <= `InstValid;	
								end
							`EXE_MFLO: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_MFLO_OP;
		  						alusel_o <= `EXE_RES_MOVE;   
								reg1_read_o <= 1'b0;	reg2_read_o <= 1'b0;
		  						instvalid <= `InstValid;	
								end
							`EXE_MTHI: begin
								wreg_o <= `WriteDisable;		
								aluop_o <= `EXE_MTHI_OP;   //mthi和mtlo没有运算类型，给HI和LO赋值
		  						reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0; 
								instvalid <= `InstValid;	
								end
							`EXE_MTLO: begin
								wreg_o <= `WriteDisable;		
								aluop_o <= `EXE_MTLO_OP;   //mthi和mtlo没有运算类型，给HI和LO赋值
		  						reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0; 
								instvalid <= `InstValid;	
								end
							`EXE_MOVN: begin
								aluop_o <= `EXE_MOVN_OP;
		  						alusel_o <= `EXE_RES_MOVE;   
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;
								   if(reg2_o != `ZeroWord) begin        
	 								wreg_o <= `WriteEnable;
	 							   end else begin
	 								wreg_o <= `WriteDisable;
	 							   end
								   //wreg_o的值要根据寄存器读出的值来确定，所以后面用if语句来写
								end
							`EXE_MOVZ: begin
								aluop_o <= `EXE_MOVZ_OP;
		  						alusel_o <= `EXE_RES_MOVE;   
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;
								   if(reg2_o == `ZeroWord) begin
	 								wreg_o <= `WriteEnable;
	 							   end else begin
	 								wreg_o <= `WriteDisable;
	 							   end
								   //wreg_o的值要根据寄存器读出的值来确定，所以后面用if语句来写
								end		  		
						        `EXE_SLT: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SLT_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_SLTU: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SLTU_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_ADD: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_ADD_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_ADDU: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_ADDU_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_SUB: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SUB_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_SUBU: begin
								wreg_o <= `WriteEnable;		
								aluop_o <= `EXE_SUBU_OP;
		  						alusel_o <= `EXE_RES_ARITHMETIC;		
								reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end
							`EXE_MULT: begin
								wreg_o <= `WriteDisable;
								aluop_o <= `EXE_MULT_OP;
		  						reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1; 
								instvalid <= `InstValid;	
								end
							`EXE_MULTU: begin
								wreg_o <= `WriteDisable;
								aluop_o <= `EXE_MULTU_OP;
		  						reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1; 
								instvalid <= `InstValid;	
								end 	
						      
						      default:begin
						                end
					     endcase  //op3
				         end
				 default:begin
				         end
			     endcase  //op2
			   end									  
		  
		  //从这往下再判断op不为0的情况：
		    `EXE_ORI:begin                        //ORI指令
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_OR_OP;
		  		alusel_o <= `EXE_RES_LOGIC; 
				reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0;	  	
				imm <= {16'h0, inst_i[15:0]};		
				wd_o <= inst_i[20:16];
				instvalid <= `InstValid;	
		  	end
		    `EXE_ANDI:begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_AND_OP;
		  		alusel_o <= `EXE_RES_LOGIC;	
				reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0;	  	
				imm <= {16'h0, inst_i[15:0]};		
				wd_o <= inst_i[20:16];		  	
				instvalid <= `InstValid;	
				end	 	
		    `EXE_XORI:begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_XOR_OP;
		  		alusel_o <= `EXE_RES_LOGIC;	
				reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0;	  	
				imm <= {16'h0, inst_i[15:0]};		
				wd_o <= inst_i[20:16];		  	
				instvalid <= `InstValid;	
				end	 		
		    `EXE_LUI:begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_OR_OP;
		  		alusel_o <= `EXE_RES_LOGIC; 
				reg1_read_o <= 1'b1;	reg2_read_o <= 1'b0;	  	
				imm <= {inst_i[15:0], 16'h0};		
				wd_o <= inst_i[20:16];		  	
				instvalid <= `InstValid;	
				end		
		    `EXE_PREF:begin
		  		wreg_o <= `WriteDisable;		
				aluop_o <= `EXE_NOP_OP;
		  		alusel_o <= `EXE_RES_NOP; 
				reg1_read_o <= 1'b0;	reg2_read_o <= 1'b0;	  	  	
				instvalid <= `InstValid;	
				end										  	
		     default:begin
		                end
		  endcase  //case op
	
	      if (inst_i[31:21] == 11'b00000000000) begin
		  	if (op3 == `EXE_SLL) begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_SLL_OP;
		  		alusel_o <= `EXE_RES_SHIFT; 
				reg1_read_o <= 1'b0;	reg2_read_o <= 1'b1;	  	
				imm[4:0] <= inst_i[10:6];		
				wd_o <= inst_i[15:11];
				instvalid <= `InstValid;	
			  end else if ( op3 == `EXE_SRL ) begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_SRL_OP;
		  		alusel_o <= `EXE_RES_SHIFT; 
				reg1_read_o <= 1'b0;	reg2_read_o <= 1'b1;	  	
				imm[4:0] <= inst_i[10:6];		
				wd_o <= inst_i[15:11];
				instvalid <= `InstValid;	
			  end else if ( op3 == `EXE_SRA ) begin
		  		wreg_o <= `WriteEnable;		
				aluop_o <= `EXE_SRA_OP;
		  		alusel_o <= `EXE_RES_SHIFT; 
				reg1_read_o <= 1'b0;	reg2_read_o <= 1'b1;	  	
				imm[4:0] <= inst_i[10:6];		
				wd_o <= inst_i[15:11];
				instvalid <= `InstValid;	
			  end
			end		  
		  
		end  //if
	end  //always
	
//由于数据前推，给reg1_o的赋值增加了两种情况：
 //1. 如果regflie模块读端口1要读取的寄存器就是执行阶段要写的目的寄存器，那么直接把执行阶段的结果ex_wdata_i作为reg1_o的值；
 //2. 如果regflie模块读端口1要读取的寄存器就是访存阶段要写的目的寄存器，那么直接把访存阶段的结果ex_wdata_i作为reg1_o的值；

//////第二段：确定进行运算的操作数1，即reg1_o//////
	always @ (*) begin    //组合逻辑电路
		if(rst == `RstEnable) begin 
			reg1_o <= `ZeroWord;               //复位时，源操作数置0
	        end else if( (reg1_read_o == 1'b1) && (ex_wreg_i == 1'b1) && (ex_wd_i == reg1_addr_o)begin
	  	        reg1_o <= ex_wdata_i;             
			          //如果regflie模块读端口1要读取的寄存器就是执行阶段要写的目的寄存器，两个使能都有效，且地址相同
				  //那么直接把执行阶段的结果ex_wdata_i作为reg1_o的值；
	         end else if( (reg1_read_o == 1'b1) && (mem_wreg_i == 1'b1) && (mem_wd_i == reg1_addr_o)begin
	  	        reg1_o <= mem_wdata_i;             
			          //如果regflie模块读端口1要读取的寄存器就是执行阶段要写的目的寄存器，两个使能都有效，且地址相同
				  //那么直接把执行阶段的结果mem_wdata_i作为reg1_o的值；
		end else if(reg1_read_o == 1'b1)begin
	  	        reg1_o <= reg1_data_i;
		end else if(reg1_read_o == 1'b0) begin
	  	        reg1_o <= imm;                     //如果是指令里的值，就把立即数赋给源操作数
	        end else begin
	                reg1_o <= `ZeroWord;
	        end
	end
	
	
//////第二段：确定进行运算的操作数2，即reg2_o//////
	always @ (*) begin    //组合逻辑电路，和上面是一样的
		if(rst == `RstEnable) begin
			reg2_o <= `ZeroWord;               
	        end else if( (reg2_read_o == 1'b1) && (ex_wreg_i == 1'b1) && (ex_wd_i == reg2_addr_o)begin
	  	        reg2_o <= ex_wdata_i;             
			          //如果regflie模块读端口2要读取的寄存器就是执行阶段要写的目的寄存器，两个使能都有效，且地址相同
				  //那么直接把执行阶段的结果ex_wdata_i作为reg2_o的值；
	         end else if( (reg2_read_o == 1'b1) && (mem_wreg_i == 1'b1) && (mem_wd_i == reg2_addr_o)begin
	  	        reg2_o <= mem_wdata_i;             
			          //如果regflie模块读端口2要读取的寄存器就是执行阶段要写的目的寄存器，两个使能都有效，且地址相同
				  //那么直接把执行阶段的结果mem_wdata_i作为reg2_o的值；
		end else if(reg2_read_o == 1'b1) begin
	  	        reg2_o <= reg2_data_i;             
	        end else if(reg2_read_o == 1'b0) begin
	  	        reg2_o <= imm;                     
	        end else begin
	                reg2_o <= `ZeroWord;
	  end
	end

endmodule

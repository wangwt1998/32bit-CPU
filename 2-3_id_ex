`include "defines.v"

module id_ex(

	input	wire		      clk,          //1bit，时钟信号
	input   wire		      rst,          //1bit，复位信号
	
	input wire[5:0]		      stall,        //来自控制模块的信息
	
	//从译码阶段传递过来的信息
	input wire[`AluOpBus]         id_aluop,     //8bit，运算子类型
	input wire[`AluSelBus]        id_alusel,    //3bit，运算类型
	input wire[`RegBus]           id_reg1,      //32bit，源操作数1
	input wire[`RegBus]           id_reg2,      //32bit，源操作数2
	input wire[`RegAddrBus]       id_wd,        //5bit，要写入的目的寄存器地址
	input wire                    id_wreg,      //1bit，是否要写入目的寄存器
	
	//传递到执行阶段的信息
	output reg[`AluOpBus]         ex_aluop,     //8bit，运算子类型
	output reg[`AluSelBus]        ex_alusel,    //3bit，运算类型
	output reg[`RegBus]           ex_reg1,      //32bit，源操作数1
	output reg[`RegBus]           ex_reg2,      //32bit，源操作数2
	output reg[`RegAddrBus]       ex_wd,        //5bit，要写入的目的寄存器地址
	output reg                    ex_wreg       //1bit，是否要写入目的寄存器
);

	always @ (posedge clk) begin  //只有一个简单的时序逻辑电路，依次把输入赋给输出就可以了
		if (rst == `RstEnable) begin        
			ex_aluop <= `EXE_NOP_OP;
			ex_alusel <= `EXE_RES_NOP;
			ex_reg1 <= `ZeroWord;
			ex_reg2 <= `ZeroWord;
			ex_wd <= `NOPRegAddr;
			ex_wreg <= `WriteDisable;
		end else if(stall[2] == `Stop && stall[3] == `NoStop) begin     //暂停的话就是全部赋零
			ex_aluop <= `EXE_NOP_OP; 
			ex_alusel <= `EXE_RES_NOP;
			ex_reg1 <= `ZeroWord;
			ex_reg2 <= `ZeroWord;
			ex_wd <= `NOPRegAddr;
			ex_wreg <= `WriteDisable;
		end else if(stall[2] == `NoStop) begin		
			ex_aluop <= id_aluop;
			ex_alusel <= id_alusel;
			ex_reg1 <= id_reg1;
			ex_reg2 <= id_reg2;
			ex_wd <= id_wd;
			ex_wreg <= id_wreg;		
		end
	end
	
endmodule

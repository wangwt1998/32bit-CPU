`include "defines.v"

module ex_mem(

	input wire		      clk,         //1bit，时钟信号
	input wire		      rst,         //1bit，复位信号
	
	
	//来自执行阶段的信息	
	input wire[`RegAddrBus]       ex_wd,        //5bit，执行阶段，要写入的目的寄存器地址
	input wire                    ex_wreg,      //1bit，执行阶段，是否要写入的目的寄存器
	input wire[`RegBus]	      ex_wdata,     //32bit，执行阶段，要写入目的寄存器的值
	input wire[`RegBus]           ex_hi,        //32bit，执行阶段，要写入HI寄存器的值
	input wire[`RegBus]           ex_lo,        //32bit，执行阶段，要写入LO寄存器的值
	input wire                    ex_whilo,     //1bit，执行阶段，是否要写入的HILO寄存器
	
	//送到访存阶段的信息
	output reg[`RegAddrBus]       mem_wd,       //5bit，访存阶段，要写入的目的寄存器地址      
	output reg                    mem_wreg,     //1bit，访存阶段，是否要写入的目的寄存器
	output reg[`RegBus]	      mem_wdata     //32bit，访存阶段，要写入目的寄存器的值
	output reg[`RegBus]          mem_hi,        //32bit，执行阶段，要写入HI寄存器的值
	output reg[`RegBus]          mem_lo,        //32bit，执行阶段，要写入LO寄存器的值
	output reg                   mem_whilo	    //1bit，执行阶段，是否要写入的HILO寄存器
	
);

	always @ (posedge clk) begin     //一个简单的时序逻辑电路，直接都赋值过去就可以
		   if(rst == `RstEnable) begin
			      mem_wd <= `NOPRegAddr;
			      mem_wreg <= `WriteDisable;
		              mem_wdata <= `ZeroWord;	
			      mem_hi <= `ZeroWord;
		              mem_lo <= `ZeroWord;
		              mem_whilo <= `WriteDisable;	
		   end else begin
			      mem_wd <= ex_wd;
			      mem_wreg <= ex_wreg;
			      mem_wdata <= ex_wdata;	
			      mem_hi <= ex_hi;
			      mem_lo <= ex_lo;
			      mem_whilo <= ex_whilo;
		   end    //if
	end      //always
			
endmodule

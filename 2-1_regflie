`include "defines.v"

//regfile模块实现了32个32位寄存器，可以同时进行两个寄存器的读操作和一个寄存器的写操作

module regfile(

	input wire			clk,          //1bit，时钟信号
	input wire			rst,          //1bit，复位信号
	
	//写端口
	input wire			we,           //1bit，写使能信号
	input wire[`RegAddrBus]		waddr,        //5bit，要写入的寄存器地址
	input wire[`RegBus]		wdata,        //32bit，要写入的数据
	
	//读端口1
	input wire			re1,          //1bit，第一个读寄存器端口读使能信号        
	input wire[`RegAddrBus]	        raddr1,       //5bit，第一个读寄存器端口要读取的寄存器地址
	
	output reg[`RegBus]             rdata1,       //32bit，第一个读寄存器端口输出的寄存器值
	
	//读端口2
	input wire			re2,          //1bit，第二个读寄存器端口读使能信号 
	input wire[`RegAddrBus]	        raddr2,       //5bit，第二个读寄存器端口要读取的寄存器地址
	
	output reg[`RegBus]             rdata2        //32bit，第二个读寄存器端口输出的寄存器值
	
);

//////第一段：定义32个32位寄存器//////
	reg[`RegBus]  regs[0:`RegNum-1];

//////第二段：写操作//////
	always @ (posedge clk) begin
		if (rst == `RstDisable) begin
			if((we == `WriteEnable) && (waddr != `RegNumLog2'h0)) begin
				regs[waddr] <= wdata;
			end
		end
	end
        //当复位信号无效，且写使能信号有效，写入的地址不是0地址的话，就把数据写入进去
	
//////第三段：读端口1的读操作//////
	always @ (*) begin  //注意这里的代码表示，是组合逻辑电路，上面有CLK的是时序电路
		if(rst == `RstEnable) begin                       //首先判断复位信号，如果有效就读出0
			  rdata1 <= `ZeroWord;
	        end else if(raddr1 == `RegNumLog2'h0) begin       //其次判断读取的地址，如果地址是0就读出0
	  		  rdata1 <= `ZeroWord;
	        end else if((re1 == `ReadEnable) && (we == `WriteEnable) && (raddr1 == waddr)) begin 
	  	          rdata1 <= wdata;
			                                          //再判断写入端口，如果写使能和读使能都有效，且地址相同，那么
								  //直接把写入的数据给到读出端口
								   
	        end else if(re1 == `ReadEnable) begin             //如果以上特殊情况都没满足，来到这一条，只是读使能有效，正常把数据读出就可以
	                  rdata1 <= regs[raddr1];
	        end else begin                                    //第一个读寄存器端口不能使用时，直接输出0
	                  rdata1 <= `ZeroWord;
	        end
	end

//////第四段：读端口2的读操作//////
	always @ (*) begin  //这一段和上面一样
		if(rst == `RstEnable) begin
			  rdata2 <= `ZeroWord;
	        end else if(raddr2 == `RegNumLog2'h0) begin
	  		  rdata2 <= `ZeroWord;
	        end else if((raddr2 == waddr) && (we == `WriteEnable) && (re2 == `ReadEnable)) begin
	  	          rdata2 <= wdata;
	        end else if(re2 == `ReadEnable) begin
	                  rdata2 <= regs[raddr2];
	        end else begin
	                  rdata2 <= `ZeroWord;
	        end
	end

endmodule

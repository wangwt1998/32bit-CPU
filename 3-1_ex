`include "defines.v"

module ex(

	input wire	              rst,         //1bit，复位信号
	
	//送到执行阶段的信息
	input wire[`AluOpBus]         aluop_i,     //8bit，运算子类型
	input wire[`AluSelBus]        alusel_i,    //3bit，运算类型
	input wire[`RegBus]           reg1_i,      //32bit，源操作数1
	input wire[`RegBus]           reg2_i,      //32bit，源操作数2
	input wire[`RegAddrBus]       wd_i,        //5bit，要写入的目的寄存器地址
	input wire                    wreg_i,      //1bit，是否要写入目的寄存器

        //HI、LO寄存器的值
	input wire[`RegBus]           hi_i,
	input wire[`RegBus]           lo_i,

	//回写阶段的指令是否要写HI、LO，用于检测HI、LO的数据相关
	input wire[`RegBus]           wb_hi_i,     //32bit，处于回写阶段的指令要写入HI寄存器的值
	input wire[`RegBus]           wb_lo_i,     //32bit，处于回写阶段的指令要写入LO寄存器的值
	input wire                    wb_whilo_i,  //1bit，处于回写阶段的指令是否要写入HILO寄存器
	
	//访存阶段的指令是否要写HI、LO，用于检测HI、LO的数据相关
	input wire[`RegBus]           mem_hi_i,     //32bit，处于访存阶段的指令要写入HI寄存器的值
	input wire[`RegBus]           mem_lo_i,     //32bit，处于访存阶段的指令要写入LO寄存器的值
	input wire                    mem_whilo_i,  //1bit，处于回写阶段的指令是否要写入HILO寄存器
	
	//执行的结果
	output reg[`RegAddrBus]       wd_o,        //5bit，要写入的目的寄存器地址
	output reg                    wreg_o,      //1bit，是否要写入目的寄存器
	output reg[`RegBus]	      wdata_o      //32bit，要写入目的寄存器的值
	
	output reg[`RegBus]           hi_o,        //32bit，执行（EX）阶段要写入HI寄存器的值
	output reg[`RegBus]           lo_o,        //32bit，执行（EX）阶段要写入LO寄存器的值
	output reg                    whilo_o      //1bit，执行（EX）阶段的指令是否要写入HILO寄存器 	
);

  reg[`RegBus]   logicout;       //保存逻辑运算结果
  reg[`RegBus]   shiftres;       //保存移位运算结果
  reg[`RegBus]   moveres;        //保存移动运算结果
  reg[`RegBus]   arithmeticres;  //保存算术运算结果
  reg[`RegBus]   HI;             //保存HI寄存器的最新值
  reg[`RegBus]   LO;             //保存LO寄存器的最新值
  wire[`RegBus]  reg2_i_mux;     //保存输入的第二个操作数reg2_i的补码
  wire[`RegBus]  reg1_i_not;	 //保存输入的第一个操作数reg1_i取反后的值
  wire[`RegBus]  result_sum;     //保存加法结果
  wire           ov_sum;         //保存溢出情况
  wire           reg1_eq_reg2;   //第一个操作数是否等于第二个操作数
  wire           reg1_lt_reg2;   //第一个操作数是否小于第二个操作数
  wire[`RegBus]  opdata1_mult;   //乘法操作中的被乘数
  wire[`RegBus]  opdata2_mult;   //乘法操作中的乘数
  reg[`DoubleRegBus] mulres;	 //保存乘法结果，宽度为64位
  wire[`DoubleRegBus] hilo_temp; //临时保存乘法结果，宽度为64位

 
 //进行逻辑运算
 always @ (*) begin
        if(rst == `RstEnable) begin
		logicout <= `ZeroWord;
	end else begin
		case (aluop_i)  //判断运算子类型
			`EXE_OR_OP:begin   //逻辑或运算
				logicout <= reg1_i | reg2_i;
			end
			`EXE_AND_OP:begin  //逻辑与运算
				logicout <= reg1_i & reg2_i;
			end
			`EXE_NOR_OP:begin  //逻辑或非运算
				logicout <= ~(reg1_i |reg2_i);
			end
			`EXE_XOR_OP:begin  //逻辑异或运算
				logicout <= reg1_i ^ reg2_i;
			end
			default:begin
			        logicout <= `ZeroWord;
			end
		endcase
	end  //if
  end //always

always @ (*) begin
       if(rst == `RstEnable) begin
	       shiftres <= `ZeroWord;
       end else begin
	       case (aluop_i)
			`EXE_SLL_OP:begin  //逻辑左移
				shiftres <= reg2_i << reg1_i[4:0] ;
			end
			`EXE_SRL_OP:begin  //逻辑右移
				shiftres <= reg2_i >> reg1_i[4:0];
			end
			`EXE_SRA_OP:begin  //算术右移
				shiftres <= ({32{reg2_i[31]}} << (6'd32-{1'b0, reg1_i[4:0]})) 
												| reg2_i >> reg1_i[4:0];
			end
			default:begin
				shiftres <= `ZeroWord;
			end
			endcase
		end    //if
	end      //always

//（1）确定reg2_i_mux的值：
//       如果是减法sub,subu，，或者有符号比较运算stl，那么reg2_i_mux等于第二个操作数reg2_i的补码，
//       否则reg2_i_mux就等于第二个操作数reg2_i。
assign reg2_i_mux = ((aluop_i == `EXE_SUB_OP) || (aluop_i == `EXE_SUBU_OP) || (aluop_i == `EXE_SLT_OP) ) ? (~reg2_i)+1 : reg2_i;

//（2）确定result_sum的值：
//  A. 如果是add,addu,addi,addiu运算，此时reg2_i_mux就是第二个操作数reg2_i，所以result_sum就是加法运算的结果。
//  B. 如果是sub,subu运算，此时reg2_i_mux是第二个操作数reg2_i的补码，所以result_sum就是减法运算的结果。
//  C. 如果是有符号比较运算stl，此时此时reg2_i_mux还是第二个操作数reg2_i的补码，所以result_sum还是减法运算的结果，可以通过判断减法结果是否小于0，进而判断
//     第一个操作数reg1_i是否小于第二个操作数reg2_i 
assign result_sum = reg1_i + reg2_i_mux;										 

//（3）确定ov_sum的值：
//   计算是否溢出，加法指令（add和addi）、减法指令（sub）需要判断是否溢出，（注意addu和addiu不用判断是否溢出，永远都会存）
//   满足以下两种情况之一时，有溢出：
//  A. reg1_i为正数，reg2_i_mux为正数，但是两者之和为负数（判断最高位，第31位的正负即可）
//  B. reg1_i为负数，reg2_i_mux为负数，但是两者之和为正数
assign ov_sum = ((!reg1_i[31] && !reg2_i_mux[31]) && result_sum[31]) || ((reg1_i[31] && reg2_i_mux[31]) && (!result_sum[31])); 

//（4）
assign reg1_lt_reg2 = ((aluop_i == `EXE_SLT_OP)) ? ((reg1_i[31] && !reg2_i[31]) ||  (!reg1_i[31] && !reg2_i[31] && result_sum[31]) || 
                      (reg1_i[31] && reg2_i[31] && result_sum[31])) : (reg1_i < reg2_i);

assign reg1_i_not = ~reg1_i;												

always @ (*) begin
	if(rst == `RstEnable) begin
			arithmeticres <= `ZeroWord;
		end else begin
			case (aluop_i)
				`EXE_SLT_OP, `EXE_SLTU_OP:		begin
					arithmeticres <= reg1_lt_reg2 ;
				end
				`EXE_ADD_OP, `EXE_ADDU_OP, `EXE_ADDI_OP, `EXE_ADDIU_OP:		begin
					arithmeticres <= result_sum; 
				end
				`EXE_SUB_OP, `EXE_SUBU_OP:		begin
					arithmeticres <= result_sum; 
				end		
				`EXE_CLZ_OP:		begin
					arithmeticres <= reg1_i[31] ? 0 : reg1_i[30] ? 1 : reg1_i[29] ? 2 :
													 reg1_i[28] ? 3 : reg1_i[27] ? 4 : reg1_i[26] ? 5 :
													 reg1_i[25] ? 6 : reg1_i[24] ? 7 : reg1_i[23] ? 8 : 
													 reg1_i[22] ? 9 : reg1_i[21] ? 10 : reg1_i[20] ? 11 :
													 reg1_i[19] ? 12 : reg1_i[18] ? 13 : reg1_i[17] ? 14 : 
													 reg1_i[16] ? 15 : reg1_i[15] ? 16 : reg1_i[14] ? 17 : 
													 reg1_i[13] ? 18 : reg1_i[12] ? 19 : reg1_i[11] ? 20 :
													 reg1_i[10] ? 21 : reg1_i[9] ? 22 : reg1_i[8] ? 23 : 
													 reg1_i[7] ? 24 : reg1_i[6] ? 25 : reg1_i[5] ? 26 : 
													 reg1_i[4] ? 27 : reg1_i[3] ? 28 : reg1_i[2] ? 29 : 
													 reg1_i[1] ? 30 : reg1_i[0] ? 31 : 32 ;
				end
				`EXE_CLO_OP:		begin
					arithmeticres <= (reg1_i_not[31] ? 0 : reg1_i_not[30] ? 1 : reg1_i_not[29] ? 2 :
													 reg1_i_not[28] ? 3 : reg1_i_not[27] ? 4 : reg1_i_not[26] ? 5 :
													 reg1_i_not[25] ? 6 : reg1_i_not[24] ? 7 : reg1_i_not[23] ? 8 : 
													 reg1_i_not[22] ? 9 : reg1_i_not[21] ? 10 : reg1_i_not[20] ? 11 :
													 reg1_i_not[19] ? 12 : reg1_i_not[18] ? 13 : reg1_i_not[17] ? 14 : 
													 reg1_i_not[16] ? 15 : reg1_i_not[15] ? 16 : reg1_i_not[14] ? 17 : 
													 reg1_i_not[13] ? 18 : reg1_i_not[12] ? 19 : reg1_i_not[11] ? 20 :
													 reg1_i_not[10] ? 21 : reg1_i_not[9] ? 22 : reg1_i_not[8] ? 23 : 
													 reg1_i_not[7] ? 24 : reg1_i_not[6] ? 25 : reg1_i_not[5] ? 26 : 
													 reg1_i_not[4] ? 27 : reg1_i_not[3] ? 28 : reg1_i_not[2] ? 29 : 
													 reg1_i_not[1] ? 30 : reg1_i_not[0] ? 31 : 32) ;
				end
				default:				begin
					arithmeticres <= `ZeroWord;
				end
			endcase
		end
	end

  //取得乘法操作的操作数，如果是有符号除法且操作数是负数，那么取反加一
	assign opdata1_mult = (((aluop_i == `EXE_MUL_OP) || (aluop_i == `EXE_MULT_OP))
													&& (reg1_i[31] == 1'b1)) ? (~reg1_i + 1) : reg1_i;

  assign opdata2_mult = (((aluop_i == `EXE_MUL_OP) || (aluop_i == `EXE_MULT_OP))
													&& (reg2_i[31] == 1'b1)) ? (~reg2_i + 1) : reg2_i;		

  assign hilo_temp = opdata1_mult * opdata2_mult;																				

	always @ (*) begin
		if(rst == `RstEnable) begin
			mulres <= {`ZeroWord,`ZeroWord};
		end else if ((aluop_i == `EXE_MULT_OP) || (aluop_i == `EXE_MUL_OP))begin
			if(reg1_i[31] ^ reg2_i[31] == 1'b1) begin
				mulres <= ~hilo_temp + 1;
			end else begin
			  mulres <= hilo_temp;
			end
		end else begin
				mulres <= hilo_temp;
		end
	end




//得到最新的HI、LO寄存器的值，此处要解决指令数据相关问题
//（一定要先判断访存，再判断回写，因为访存阶段的指令一定在回写阶段指令的后面）

always @ (*) begin
	if(rst == `RstEnable) begin
		{HI,LO} <= {`ZeroWord,`ZeroWord};
	end else if(mem_whilo_i == `WriteEnable) begin
		{HI,LO} <= {mem_hi_i,mem_lo_i};   //首先判断访存阶段的指令是否要写HILO，如果是那么HILO的值就是访存阶段的值
	end else if(wb_whilo_i == `WriteEnable) begin
		{HI,LO} <= {wb_hi_i,wb_lo_i};   //然后判断回写阶段的指令是否要写HILO，如果是那么HILO的值就是回写阶段的值
	end else begin
		{HI,LO} <= {hi_i,lo_i};	   //如果上述都不是，那么HILO的值就是当前HILO的值。
	end
end	

//MFHI、MFLO、MOVN、MOVZ指令，针对不同的移动操作指令，确定moveres的值，moveres存储的就是移动操作指令的值
always @ (*) begin
	if(rst == `RstEnable) begin
	        moveres <= `ZeroWord;
	end else begin
	        moveres <= `ZeroWord;
	     case (aluop_i)
	   	   `EXE_MFHI_OP:	begin
	   		moveres <= HI;  
	   	   end
	   	   `EXE_MFLO_OP:	begin
	   		moveres <= LO;
	   	   end
	   	   `EXE_MOVZ_OP:	begin
	   		moveres <= reg1_i;
	   	   end
	   	   `EXE_MOVN_OP:	begin
	   		moveres <= reg1_i;
	   	   end
	   	   default : begin
	   	   end
	      endcase
	end  //if
end  //always

////////依据aluse1_i指示的运算类型，选择一个运算结果作为最终结果//////
 always @ (*) begin
	wd_o <= wd_i;	 	 	
	wreg_o <= wreg_i;
	case ( alusel_i ) 
	 	  `EXE_RES_LOGIC: begin
	 		   wdata_o <= logicout;  //如果运算类型是逻辑运算就把逻辑运算结果logicout赋给输出值
	 	   end
	 	   `EXE_RES_SHIFT: begin
	 		   wdata_o <= shiftres;  //如果运算类型是移位运算就把移位运算结果shiftres赋给输出值
	 	   end
		   `EXE_RES_MOVE:	begin
	 		   wdata_o <= moveres;  //如果运算类型是移动运算就把移动运算结果shiftres赋给输出值
	 	   end	 	
		   
		   default:	        begin
	 		   wdata_o <= `ZeroWord;
	 	   end
	endcase
 end	
 
 //如果是mthi和mtlo指令，那么需要给出whilo_o（使能端，是否要写入HILO）,hi_o（写入HI的值）,lo_o（写入LO的值）的值
 always @ (*) begin
	if(rst == `RstEnable) begin
		whilo_o <= `WriteDisable;
		hi_o <= `ZeroWord;
		lo_o <= `ZeroWord;		
	end else if(aluop_i == `EXE_MTHI_OP) begin  //判断运算子类型，是HI，使能端enable，寄存器1口读出的值给到HI，LO的值保持不变
		whilo_o <= `WriteEnable;
		hi_o <= reg1_i;
		lo_o <= LO;
	end else if(aluop_i == `EXE_MTLO_OP) begin  //判断运算子类型，是LO，使能端enable，寄存1口读出的值给到LO，HI的值保持不变
		whilo_o <= `WriteEnable;
		hi_o <= HI;
		lo_o <= reg1_i;
	end else begin
		whilo_o <= `WriteDisable;
		hi_o <= `ZeroWord;
		lo_o <= `ZeroWord;
	end				
end			

endmodule

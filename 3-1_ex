`include "defines.v"

module ex(

	input wire	              rst,         //1bit，复位信号
	
	//送到执行阶段的信息
	input wire[`AluOpBus]         aluop_i,     //8bit，运算子类型
	input wire[`AluSelBus]        alusel_i,    //3bit，运算类型
	input wire[`RegBus]           reg1_i,      //32bit，源操作数1
	input wire[`RegBus]           reg2_i,      //32bit，源操作数2
	input wire[`RegAddrBus]       wd_i,        //5bit，要写入的目的寄存器地址
	input wire                    wreg_i,      //1bit，是否要写入目的寄存器

        //HI、LO寄存器的值
	input wire[`RegBus]           hi_i,
	input wire[`RegBus]           lo_i,

	//回写阶段的指令是否要写HI、LO，用于检测HI、LO的数据相关
	input wire[`RegBus]           wb_hi_i,     //32bit，处于回写阶段的指令要写入HI寄存器的值
	input wire[`RegBus]           wb_lo_i,     //32bit，处于回写阶段的指令要写入LO寄存器的值
	input wire                    wb_whilo_i,  //1bit，处于回写阶段的指令是否要写入HILO寄存器
	
	//访存阶段的指令是否要写HI、LO，用于检测HI、LO的数据相关
	input wire[`RegBus]           mem_hi_i,     //32bit，处于访存阶段的指令要写入HI寄存器的值
	input wire[`RegBus]           mem_lo_i,     //32bit，处于访存阶段的指令要写入LO寄存器的值
	input wire                    mem_whilo_i,  //1bit，处于回写阶段的指令是否要写入HILO寄存器
	
	//执行的结果
	output reg[`RegAddrBus]       wd_o,        //5bit，要写入的目的寄存器地址
	output reg                    wreg_o,      //1bit，是否要写入目的寄存器
	output reg[`RegBus]	      wdata_o      //32bit，要写入目的寄存器的值
	
	output reg[`RegBus]           hi_o,        //32bit，执行（EX）阶段要写入HI寄存器的值
	output reg[`RegBus]           lo_o,        //32bit，执行（EX）阶段要写入LO寄存器的值
	output reg                    whilo_o      //1bit，执行（EX）阶段的指令是否要写入HILO寄存器 	
);

  reg[`RegBus] logicout;     //保存逻辑运算结果
  reg[`RegBus] shiftres;     //保存移位运算结果
  reg[`RegBus] moveres;      //保存移动运算结果
  reg[`RegBus] HI;           //保存HI寄存器的最新值
  reg[`RegBus] LO;           //保存LO寄存器的最新值
 
 //进行逻辑运算
 always @ (*) begin
        if(rst == `RstEnable) begin
		logicout <= `ZeroWord;
	end else begin
		case (aluop_i)  //判断运算子类型
			`EXE_OR_OP:begin   //逻辑或运算
				logicout <= reg1_i | reg2_i;
			end
			`EXE_AND_OP:begin  //逻辑与运算
				logicout <= reg1_i & reg2_i;
			end
			`EXE_NOR_OP:begin  //逻辑或非运算
				logicout <= ~(reg1_i |reg2_i);
			end
			`EXE_XOR_OP:begin  //逻辑异或运算
				logicout <= reg1_i ^ reg2_i;
			end
			default:begin
			        logicout <= `ZeroWord;
			end
		endcase
	end  //if
  end //always

always @ (*) begin
       if(rst == `RstEnable) begin
	       shiftres <= `ZeroWord;
       end else begin
	       case (aluop_i)
			`EXE_SLL_OP:begin  //逻辑左移
				shiftres <= reg2_i << reg1_i[4:0] ;
			end
			`EXE_SRL_OP:begin  //逻辑右移
				shiftres <= reg2_i >> reg1_i[4:0];
			end
			`EXE_SRA_OP:begin  //算术右移
				shiftres <= ({32{reg2_i[31]}} << (6'd32-{1'b0, reg1_i[4:0]})) 
												| reg2_i >> reg1_i[4:0];
			end
			default:begin
				shiftres <= `ZeroWord;
			end
			endcase
		end    //if
	end      //always

//得到最新的HI、LO寄存器的值，此处要解决指令数据相关问题
//（一定要先判断访存，再判断回写，因为访存阶段的指令一定在回写阶段指令的后面）

always @ (*) begin
	if(rst == `RstEnable) begin
		{HI,LO} <= {`ZeroWord,`ZeroWord};
	end else if(mem_whilo_i == `WriteEnable) begin
		{HI,LO} <= {mem_hi_i,mem_lo_i};   //首先判断访存阶段的指令是否要写HILO，如果是那么HILO的值就是访存阶段的值
	end else if(wb_whilo_i == `WriteEnable) begin
		{HI,LO} <= {wb_hi_i,wb_lo_i};   //然后判断回写阶段的指令是否要写HILO，如果是那么HILO的值就是回写阶段的值
	end else begin
		{HI,LO} <= {hi_i,lo_i};	   //如果上述都不是，那么HILO的值就是当前HILO的值。
	end
end	

//MFHI、MFLO、MOVN、MOVZ指令，针对不同的移动操作指令，确定moveres的值，moveres存储的就是移动操作指令的值
always @ (*) begin
	if(rst == `RstEnable) begin
	        moveres <= `ZeroWord;
	end else begin
	        moveres <= `ZeroWord;
	     case (aluop_i)
	   	   `EXE_MFHI_OP:	begin
	   		moveres <= HI;  
	   	   end
	   	   `EXE_MFLO_OP:	begin
	   		moveres <= LO;
	   	   end
	   	   `EXE_MOVZ_OP:	begin
	   		moveres <= reg1_i;
	   	   end
	   	   `EXE_MOVN_OP:	begin
	   		moveres <= reg1_i;
	   	   end
	   	   default : begin
	   	   end
	      endcase
	end  //if
end  //always

////////依据aluse1_i指示的运算类型，选择一个运算结果作为最终结果//////
 always @ (*) begin
	wd_o <= wd_i;	 	 	
	wreg_o <= wreg_i;
	case ( alusel_i ) 
	 	  `EXE_RES_LOGIC: begin
	 		   wdata_o <= logicout;  //如果运算类型是逻辑运算就把逻辑运算结果logicout赋给输出值
	 	   end
	 	   `EXE_RES_SHIFT: begin
	 		   wdata_o <= shiftres;  //如果运算类型是移位运算就把移位运算结果shiftres赋给输出值
	 	   end
		   `EXE_RES_MOVE:	begin
	 		   wdata_o <= moveres;  //如果运算类型是移动运算就把移动运算结果shiftres赋给输出值
	 	   end	 	
		   
		   default:	        begin
	 		   wdata_o <= `ZeroWord;
	 	   end
	endcase
 end	
 
 always @ (*) begin
	if(rst == `RstEnable) begin
		whilo_o <= `WriteDisable;
		hi_o <= `ZeroWord;
		lo_o <= `ZeroWord;		
	end else if(aluop_i == `EXE_MTHI_OP) begin
		whilo_o <= `WriteEnable;
		hi_o <= reg1_i;
		lo_o <= LO;
	end else if(aluop_i == `EXE_MTLO_OP) begin
		whilo_o <= `WriteEnable;
		hi_o <= HI;
		lo_o <= reg1_i;
	end else begin
		whilo_o <= `WriteDisable;
		hi_o <= `ZeroWord;
		lo_o <= `ZeroWord;
	end				
end			

endmodule
